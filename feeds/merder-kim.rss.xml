<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NX</title><link>http://blog.hoxnox.com/</link><description></description><atom:link href="http://blog.hoxnox.com/feeds/merder-kim.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 20 Sep 2012 00:00:00 +0400</lastBuildDate><item><title>Об организации проектов C++</title><link>http://blog.hoxnox.com/devel/repo_org.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Структура репоризитория и проекта&lt;/h2&gt;
&lt;p&gt;Все C/C++ проекты храняться в едином репозитории, работа которого опирается на систему контроля
версий git. Каждый проект представляет собой git-репозиторий (как правило bare).&lt;/p&gt;
&lt;p&gt;Для работы над конкретным проектом его необходимо склонировать, а по завершении работы, слить
изменения в основной репозиторий. В процессе работы изменения, внесенные другими членами команды,
подтягиваются из основного репозитория. В исключительных случаях изменения могут подтягиваться
непосредственно от членов команды, но злоупотреблять этим не стоит.&lt;/p&gt;
&lt;p&gt;Каждый C/С++ проект, как правило, включает в себя&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Исходники (.c, .cpp, .h, .hpp, ...)&lt;/p&gt;
&lt;p&gt;Директория src&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Инструкции по сборке (файлы Makefile, CMakeLists.txt)&lt;/p&gt;
&lt;p&gt;Файлы CMakeLists.txt, Makefile, ... в корне проекта, возможно дополнительные диреткории (например
cmake со скриптами, расширяющими функциональность cmake))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Публичные заголовочные файлы (для проектов-библиотек)&lt;/p&gt;
&lt;p&gt;Директория include&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Документацию&lt;/p&gt;
&lt;p&gt;Исходники и скрипты для генерации документации располагаются в директории doc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ресурсы&lt;/p&gt;
&lt;p&gt;Директория res&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Тесты&lt;/p&gt;
&lt;p&gt;Директория test&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Подпроекты&lt;/h2&gt;
&lt;p&gt;Существует два способа организации подпроектов средствами &lt;cite&gt;git&lt;/cite&gt;. Первый - с помощью
подмодулей. Второй - с помощью ветвлений и удаленных репозиториев. В первом случае информация о
подпроектах инкапсулирована в отдельных репозиториях (по 1 на каждый проект), а файлы подпроектов
располагаются в специальных поддерикториях суперпроекта. Во втором случае файлы подпроекта являются
неотъемлемой частью дерева суперпроекта, а манипуляция подпроектами осуществляется с помощью
ветвлений.&lt;/p&gt;
&lt;p&gt;Основные различия встают во весь рост при клонировании суперпроекта. В случае с ветвлениями,
пользователь, клонирующий суперпроект, может и не подозревать о наличии подпроектов в нём. Выделение
подпроекта опционально. При использовании подмодулей клонирующий должен четко понимать, что проект
имеет зависимости и аккуратно к ним относится. В качестве &amp;quot;печеньки&amp;quot; клонирующий получает менее
нагруженный репозиторий.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Рассмотрим оба способа на примере.&lt;/h3&gt;
&lt;p&gt;Допустим мы работали над библиотекой &lt;cite&gt;core&lt;/cite&gt; и на определённом этапе работы получили следующее дерево
проекта:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── cmake
│   └── nx_lib.cmake
├── doc
│   ├── pages
│   │   ├── index.hpp
│   │   └── readme.md
│   └── doxygen
├── include
│   └── core
│       ├── base.hpp
│       ├── core.hpp
│       └── data.hpp
├── src
│   ├── base.cpp
│   ├── _base_impl.cpp
│   ├── _base_impl.hpp
│   ├── core.cpp
│   └── data.cpp
├── test
│   ├── tests
│   │   ├── tbase.hpp
│   │   ├── tcore.hpp
│   │   └── tdata.hpp
│   └── test.cpp
└── CMakeLists.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Далее мы создали проект &lt;cite&gt;a&lt;/cite&gt;, использующий &lt;cite&gt;core&lt;/cite&gt; как библиотеку, причём мы бы хотели включить &lt;cite&gt;core&lt;/cite&gt;
в &lt;cite&gt;a&lt;/cite&gt; как подпроект.&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;Ветвление и удалённые репозитории&lt;/h4&gt;
&lt;p&gt;Добавляем в проект &lt;cite&gt;a&lt;/cite&gt; новую ветку, содержимое которой - клон проекта &lt;cite&gt;core&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add core /repo/core.git
git fetch core
git checkout -b core@rmt core/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Мы использовали суффикс &lt;cite&gt;&amp;#64;rmt&lt;/cite&gt;, чтобы пометить ветку-подпроект и отличать её от обычных веток. В
нашей текущей дериктории находится проект &lt;cite&gt;core&lt;/cite&gt;. Теперь в проекте &lt;cite&gt;a&lt;/cite&gt;, в директорию &lt;cite&gt;core&lt;/cite&gt; допишем
файлы проекта &lt;cite&gt;core&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout master
git read-tree --prefix=core -u core@rmt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Вот собственно и все. Теперь в суперпроекте &lt;cite&gt;a&lt;/cite&gt; есть директория с подпроектом &lt;cite&gt;core&lt;/cite&gt;. Причем фалы этой
директории находятся под версионным контролем проекта &lt;cite&gt;а&lt;/cite&gt;. Если проект &lt;cite&gt;core&lt;/cite&gt; изменился, мы можем
влить изменения следующим образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout core@rmt
git pull
git checkout master
git merge --squash -s subtree --no-commit core@rmt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Допустим вы ушли в отпуск, а по возвращении обнаружили, что коллега работал над проектом &lt;cite&gt;a&lt;/cite&gt;, не
подозревая, что есть подпроект &lt;cite&gt;core&lt;/cite&gt;. В итоге в директории &lt;cite&gt;core&lt;/cite&gt; проекта &lt;cite&gt;a&lt;/cite&gt; появились некоторые
изменения, которые вы бы хотели слить в подпроект &lt;cite&gt;core&lt;/cite&gt;. Все что нужно - слить изменения в ветку
&lt;a class="reference external" href="mailto:core&amp;#64;rmt"&gt;core&amp;#64;rmt&lt;/a&gt; и отправить изменения. Существует одна загвоздка - не существует коммита, который бы
указывал на директорию &lt;cite&gt;core&lt;/cite&gt;. Его придется создать низкоуровневой командой &lt;cite&gt;commit-tree&lt;/cite&gt;. Этот
&amp;quot;оторванный&amp;quot; коммит в последующем примкнет к истории в ветке &lt;cite&gt;core&amp;#64;rmt&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt;echo &amp;quot;core-changes&amp;quot; | git commit-tree HEAD:core
485a320dae49bc6b08c4b5d363d0674b1369b2a6
$&amp;gt;git checkout core@rmt
$&amp;gt;git merge 485a32
$&amp;gt;git push core core@rmt:master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Еще одна частая ситуация - разделяемые подпроекты. Допустим теперь мы работаем над проектом &lt;cite&gt;super&lt;/cite&gt;,
который зависит от подпроекта &lt;cite&gt;core&lt;/cite&gt;. Мы уже знаем как действовать...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add core /repo/core.git
git fetch core
git checkout -b core@rmt core/master
git checkout master
git read-tree --prefix=core -u core@rmt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь мы хотели бы добавить подпроект &lt;cite&gt;a&lt;/cite&gt;, но так, чтобы зависимость &lt;cite&gt;a&lt;/cite&gt; от &lt;cite&gt;core&lt;/cite&gt; не
дублировалась, но подпроекты &lt;cite&gt;a&lt;/cite&gt; и &lt;cite&gt;core&lt;/cite&gt; сохраняли возможность
подтягивать изменения и отправлять. Сначала добавим подпроект &lt;cite&gt;a&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add core /repo/core.git
git fetch core
git checkout -b core@rmt core/master
git checkout master
git read-tree --prefix=core -u core@rmt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Пользуясь тем, что в отличии от подмодулей, вся информация о подпроектах инкапсулирована в
подветках, а не в файлах, заменяем папку &lt;cite&gt;core&lt;/cite&gt; подпроекта &lt;cite&gt;a&lt;/cite&gt; на симлинк и сообщаем git, чтобы он
игнорил данный путь.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git reset a/core/*
git rm -r a/core
ln -s ../core a/core
git add a/core
echo &amp;quot;a/core&amp;quot; &amp;gt;&amp;gt; .gitignore
git add .gitignore
git commit -m&amp;quot;add a as subproject&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Очень важно в ветке &lt;a class="reference external" href="mailto:a&amp;#64;rmt"&gt;a&amp;#64;rmt&lt;/a&gt; также заменить директорию core на символическую ссылку. Иначе когда-нибудь
случайно поменяете какой-нибудь файл в папке core и не сможете сменить ветку на master, так как
имеются изменения, которые нельзя закоммитить так как они игнорятся.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout a@rmt
rm -r core
ln -s ../core core
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;И напоследок следует упомянуть маленькую, но очень важную деталь. При таком подходе подпроекты не
обязаны располагаться в отдельной папке, что позволяет подпроектам быть совсем маленькими. Пусть к
примеру имеется очередная реализация строки в C++:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt;ls -la string
.git string.cpp  string.hpp
$&amp;gt;cd proj/src
git remote add string /repo/string
git fetch string
git checkout -b string@rmt string/master
git checkout master
git read-tree --prefix= -u string@rmt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Потрясающе! Мы добавили файлы в дерево проекта, но при этом можем управлять ими как подпроектом с
помощью ветки &lt;cite&gt;string&amp;#64;rmt&lt;/cite&gt;!&lt;/p&gt;
&lt;p&gt;И напоследок вернёмся к нашему &lt;cite&gt;super&lt;/cite&gt;. Все подпроекты в нём - это ветки с суффиксом &lt;cite&gt;&amp;#64;rmt&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt;git branch | grep @rmt
  a@rmt
  core@rmt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Изменения в подпроекте &lt;cite&gt;core&lt;/cite&gt; можно получить так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git diff-tree -p HEAD:core core@rmt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Изменения в удаленном подпроекте &lt;cite&gt;core&lt;/cite&gt; можно получить так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git diff-tree -p HEAD:core core/master
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;Подмодули&lt;/h4&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Merder Kim &lt;hoxnox@gmail.com&gt;</dc:creator><pubDate>Thu, 20 Sep 2012 00:00:00 +0400</pubDate><guid>tag:blog.hoxnox.com,2012-09-20:devel/repo_org.html</guid><category>git</category><category>management</category></item></channel></rss>