<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>NX</title><link href="http://hoxnox.com/" rel="alternate"></link><link href="http://hoxnox.com/feeds/other.atom.xml" rel="self"></link><id>http://hoxnox.com/</id><updated>2014-10-31T00:00:00+03:00</updated><entry><title>YaC 2014</title><link href="http://hoxnox.com/devel/YaC.html" rel="alternate"></link><updated>2014-10-31T00:00:00+03:00</updated><author><name>Merder hoxnox Kim &lt;hoxnox@gmail.com&gt;</name></author><id>tag:hoxnox.com,2014-10-31:devel/YaC.html</id><summary type="html">&lt;p&gt;30 октября 2014 года прошла конференция YaC-2014, организованная
компанией Яндекс. Я присутствовал на секциях "Backend" и "Information
Security". Прослушал следующие доклады:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Презентация технологии распознавания речи от компании Яндекс. На
   докладе представлен SpeechKit - публичный программный интерфейс
   распознавания речи и сервис Cloud. Технология позволяет с 95%
   точностью распознавать русскую речь для географических объектов и с
   87% точностью текст на естественном языке. Основой технологии
   является большая нейронная сеть, обученная более чем на 500 часах
   дикторской речи и огромном количестве тестов. Помимо распознавания
   Яндекс представил синтезатор речи. Все эти технологии можно
   попробовать, используя приложение "Яндекс диктовка" для мобильных
   устройств.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Презентация новой "Яндекс метрики". На докладе показаны нововведения
   в "Яндекс метрику". Инструмент позволяет маркетологам проводить
   анализ поведения клиентов в Web-сфере и разработке под мобильные
   платформы.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В рабочей зоне проходил интерактив по теме "Использование Python для
   интерактивного анализа данных". В презентации показаны инструменты
   ipython-notebook, pandas, Basemap, позволяющие проводить быстрый
   анализ данных, составляя на их основе отчеты, графики, диаграммы и
   прочее. Поупражняться в анализе можно на специально подготовленной
   сотрудниками компании Яндекс странице
   http://ipython-workshop.yandex.net:8000
   Код представлен на github: http://github.com/koldunovn/Yac.2014&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Круглый стол по Docker. Представители Яндекс, Spotify, Badoo и
   Экспресс-42 обсуждали с сотрудником Docker inc проблемы
   использования Docker в разработке промышленного программного
   обеспечения. Основной вывод обсуждения - Docker - инструмент
   дистрибуции программного обеспечения, а не виртуальная машина.
   Docker - технология управления контейнерами. Последние -
   легковесные "виртуальные машины", позволяющие контролировать среду и
   окружение исполняемого в них программного обеспечения. Очень удачно
   сравнили Docker со статическим связыванием библиотек в C++. Затронули
   проблемы журналирования.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Доклад о тонкостях массового внедрения SSL/TLS в Яндекс. Расписаны
   подходы к снижению нагрузки на аппаратную часть правильной настройкой
   стека SSL/TLS. Затронуты вопросы получения сертификатов от основных
   CA (рекомендовали элиптическую криптографию), использование
   SSL-степлинга и восстановления сессий.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Доклад представителя Docker inc о том как можно строить сложные
   распределенные системы, используя технологии контейнеризации.
   Трудности и подходы к их решению в этой сфере. Затронуты вопросы
   организации системы как совокупности микросервисов, подходы к обмену
   данными между приложениями контейнеров (shared localhost, shared
   filesystem, shared IPC, host networking, share device nodes),
   обнаружение служб (srvice discovery).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="YaC"></category></entry><entry><title>К-свёртка</title><link href="http://hoxnox.com/other/kconvol.html" rel="alternate"></link><updated>2012-06-07T00:00:00+04:00</updated><author><name>Merder hoxnox Kim &lt;hoxnox@gmail.com&gt;</name></author><id>tag:hoxnox.com,2012-06-07:other/kconvol.html</id><summary type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Понятие к-свёртки&lt;/h2&gt;
&lt;p&gt;Рассмотрим множества не повторяющихся
натуральных чисел. Причем чаще всего
элементы этих множеств следуют друг за другом, то есть если a1,a2,a3 из A,
то часто a2=a1+1, a3=a2+1 ... Для оптимизации хранения данной информации можно использовать
к-свёртку.&lt;/p&gt;
&lt;p&gt;К-свёртка представляет собой последовательность байт, кратную 4. Блоки из четырёх байт
записаны в прямом порядке (от младшего к старшему), классифицируются на 3
вида по значению первых двух бит старшего байта следующим образом:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;10 - блок A типа&lt;/li&gt;
&lt;li&gt;00 - блок B типа&lt;/li&gt;
&lt;li&gt;01 - блок C типа&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Порядок нумерации бит в блоке:
              ...      89ABCDEF 01234567
    +--------+--------+--------+--------+
    |   3    |   2    |   1    |   0    |
    +--------+--------+--------+--------+
Пример:
    в файле: 0x00 0x22 0x63 0x80
    число  : 0x806F2200
    в bin  : 10000000 01101111 00100010 00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В к-свёртке каждое натуральное число N представлено парой чисел A и B в виде
N = 30*A + B, где&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if(N%30 == 0)
        A = N/30 - 1
        B = 30
else
        A = N/30
        B = N%30
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;При этом натуральное A будем называть индексом, а натуральное B &amp;lt;=30
остатком. Остаток B представляется в памяти числом (1 &amp;lt;&amp;lt; 32) + (1 &amp;lt;&amp;lt; (30 - B)) (см. таблицу)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Пример представления остатка
b     двоичное представление                  запись в файле
1     10100000 00000000 00000000 00000000     0x00 0x00 0x00 0xA0
2     10010000 00000000 00000000 00000000     0x00 0x00 0x00 0x90
3     10001000 00000000 00000000 00000000     0x00 0x00 0x00 0x88
4     10000100 00000000 00000000 00000000     0x00 0x00 0x00 0x84
...
29    10000000 00000000 00000000 00000010     0x00 0x20 0x00 0x80
30    10000000 00000000 00000000 00000001     0x00 0x10 0x00 0x80
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Несколько натуральных чисел группируются по индексу. Если индексы двух
натуральных чисел совпадают, их остатки суммируются. Затем пары (индекс,
сумма остатков) записываются в порядке увеличения индекса. Сумма остатков не
что иное как блок типа A. Индексы преобразуются в блоки типа B путем
вычитания из каждого следующего индекса текущего (то есть остается только
разница между индексами). Если разница равна 1, то такой индекс не
записывается.
Если сумма остатков равна &lt;cite&gt;(1 &amp;lt;&amp;lt; 32) + 0x0x3ffffffff&lt;/cite&gt; (единицы заполнены полностью),
то не имеет смысла хранить сумму остатков. В таком случае, вместо суммы
остатков хранят блок вида &lt;cite&gt;(1 &amp;lt;&amp;lt; 31) + K&lt;/cite&gt;, где К - количество таких блоков,
идущих друг за другом.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Пример создания к-свёртки из последовательности&lt;/h3&gt;
&lt;p&gt;Свернём следующую последовательность из 97 элементов:
61, 65, 90, 91, 92, 93, ...,154, 156, 157, ..., 184, 193&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;N1  = 61,  N1  = 30*2 + 1,  (2, 1)
N2  = 65,  N2  = 30*2 + 5,  (2, 5)
N3  = 90,  N3  = 30*2 + 30  (2, 30)
N4  = 91,  N4  = 30*3 + 1   (3, 1)
N5  = 92,  N5  = 30*3 + 2   (3, 2)
...                           ,
N33 = 120, N33 = 30*3 + 30  (3, 30)
N34 = 121, N34 = 30*4 + 1   (4, 1)
N35 = 122, N35 = 30*4 + 2   (4, 2)
...                           ,
N63 = 150, N63 = 30*4 + 30  (4, 30)
N64 = 151, N64 = 30*5 + 1   (5, 1)
N65 = 152, N65 = 30*5 + 2   (5, 2)
N66 = 153, N66 = 30*5 + 3   (5, 3)
N67 = 154, N67 = 30*5 + 4   (5, 4)
N68 = 156, N68 = 30*5 + 6   (5, 6)
N69 = 157, N69 = 30*5 + 7   (5, 7)
...
N96 = 184, N96 = 30*6 + 4   (6, 4)
N97 = 193, N97 = 30*6 + 13  (6, 13)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Группируем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(2, {1, 5, 30})
(3, {1, 2, ..., 30})
(4, {1, 2, ..., 30})
(5, {1, 2, 3, 4, 6, 7, ..., 30})
(6, {1, 2, 3, 4, 13})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В парах с индексами 3 и 4 присутствуют все остатки от 1 до 30, поэтому их
можно представить блоком типа C: &lt;cite&gt;0x3fffff + 2&lt;/cite&gt;. Индексы, начиная со 2 идут
друг за другом, поэтому можно их не записывать. Таким образом свёртка
записывается в следующем виде:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1. Индекс 2
2. Сумма остатков 1, 5, 30
3. C-блок 0x3fffff + 2
4. Сумма остатков 1, 2, 3, 4, 6, 7, ..., 30
5. Сумма остатков 1, 2, 3, 4, 13
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В бинарной системе счисления (группировка по 4 байта)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1. 00000000 00000000 00000000 00000010
2. 10100010 00000000 00000000 00000001
3. 01000000 00000000 00000000 00000010
4. 10111101 11111111 11111111 11111111
5. 10111100 00000010 00000000 00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В шестнадцатеричной:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1. 0x00 0x00 0x00 0x02
2. 0xA2 0x00 0x00 0x01
3. 0x40 0x00 0x00 0x02
4. 0xBD 0xFF 0xFF 0xFF
5. 0xBC 0x02 0x00 0x00
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Итого, дамп памяти в прямом порядке байт данной свёртки будет выглядеть так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;00000000 02 00 00 00 01 00 00 A2 02 00 00 40
00000010 FF FF FF BD 00 00 02 BC
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;Операции с к-свёрткой&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Добавить элемент&lt;/li&gt;
&lt;li&gt;Удалить элемент&lt;/li&gt;
&lt;li&gt;Изменить элемент&lt;/li&gt;
&lt;li&gt;Проверить наличие элемента&lt;/li&gt;
&lt;li&gt;Раскрыть в последовательность&lt;/li&gt;
&lt;li&gt;Свернуть последовательность в к-свёртку&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;Пример раскрытия к-свёртки в последовательность&lt;/h3&gt;
&lt;p&gt;Блоки типа A и C в свёртке имеют определенные индексы. Индексы следуют по
порядку. Блоки типа B и C увеличивают значение индекса не на единицу, а на
число, записанное в этом блоке (не считая биты, определяющие тип блока).&lt;/p&gt;
&lt;p&gt;Пример нумерации блоков в свёртке:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        A               B               A               A               C
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|x00 x1F x03 x80|x02 x00 x00 x00|x00 x02 x00 xB8|x10 xD3 xA1 x80|x03 x00 x00 x40|
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
i=0             ==&amp;gt;             i=i+2=2         i=i+1=3         i=i+3=6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Раскроем к-свёртку&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;00000000 01 00 00 00 FF FF F7 86 00 00 00 BE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Разбиваем на блоки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;01 00 00 00 | FF FF F7 86 | 00 00 00 BE
     B             A             A
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Блоки типа A и их индексы:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;в файле       соотв. двоичное число                   индекс
FF FF F7 86   10000110 11110111 11111111 11111111     1
00 00 00 BE   10111110 00000000 00000000 00000000     2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Остатки FF FF F7 86:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10000100 00000000 00000000 00000000   4
10000010 00000000 00000000 00000000   5
10000000 10000000 00000000 00000000   7
10000000 10000000 00000000 00000000   8
...
10000000 00010000 00000000 00000000   10
10000000 00000100 00000000 00000000   12
10000000 00000010 00000000 00000000   13
...
10000000 00000000 00000000 00000001   30
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Остатки 00 00 00 BE:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10100000 00000000 00000000 00000000   1
10010000 00000000 00000000 00000000   2
10001000 00000000 00000000 00000000   3
10000100 00000000 00000000 00000000   4
10000010 00000000 00000000 00000000   5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Соответствующая последовательность:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1*30 + 4  = 34
1*30 + 5  = 35
1*30 + 7  = 37
1*30 + 8  = 38
...
1*30 + 10 = 40
1*30 + 12 = 42
1*30 + 13 = 43
...
1*30 + 30 = 60
2*30 + 1  = 61
2*30 + 2  = 62
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;Проверка наличия элемента в свёртке&lt;/h3&gt;
&lt;p&gt;Проверка наличия системного номера в свёртке - простая операция. Для удобства свёртку можно хранить
в виде множества пар (индекс, блок типа A). Необходимо преобразовать системный номер к виду
&lt;cite&gt;sysnum = (a, b)&lt;/cite&gt;, где &lt;cite&gt;sysnum = 30a + b&lt;/cite&gt;, то есть взять целую часть от деления на 30 и
остаток. Целая часть определит пару (индекс, блок A) свёртки, &amp;quot;побитовое и&amp;quot; остатка с
соответствующим блоком типа A даст ответ принадлежит ли данный системный номер свёртке.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="algorithm"></category><category term="container"></category></entry></feed>